도커(Docker) 기본개념 정리
Docker는 애플리케이션과 그 실행 환경을 하나의 단위로 패키징하여
어디서든 일관되게 실행할 수 있도록 도와주는 컨테이너 기반 가상화 플랫폼입니다.

1. 도커란?
정의
 도커는 컨테이너 기술을 이용해 애플리케이션을 격리된 환경에서 실행할 수 있도록 해주는 플랫폼입니다.
주요 특징
 경량화: 가상머신보다 리소스를 덜 사용
 이식성: OS나 인프라에 상관없이 동일한 실행 환경 제공
 속도: 수 초 만에 실행되는 빠른 기동
 일관성: 개발 → 테스트 → 운영까지 환경 동일성 유지


2. 도커를 사용하는 이유
 전통적 문제점
  환경 설정 오류 ("내 컴퓨터에서는 되는데...")
  복잡한 의존성 및 패키지 관리
  운영 환경과 개발 환경 불일치
  느린 배포 및 리소스 낭비
 도커의 장점
  실행 환경 전체를 패키징하여 일관된 배포 가능
  수 초 내 컨테이너 실행 → 빠른 배포
  OS 커널 공유 방식 → 리소스 절약
  확장성 및 마이크로서비스에 적합

3. 도커 구조 (전체 아키텍처 개념)
 컨테이너 구조 개요
┌────────────────────────────┐
│        Application         │
├────────────────────────────┤
│        Docker Engine       │
├────────────────────────────┤
│         Host OS            │
├────────────────────────────┤
│         Hardware           │
└────────────────────────────┘
 이미지는 애플리케이션과 그 환경을 담은 정적 파일
 컨테이너는 이미지를 실행한 상태
 Docker Engine은 컨테이너를 생성, 실행, 관리하는 역할

4. 도커의 핵심 구성요소

4.1 Docker Image (도커 이미지)
 컨테이너를 생성하기 위한 템플릿 (읽기 전용)
 계층 구조로 구성 (변경 불가능, 버전 관리 가능)

4.2 Docker Container (도커 컨테이너)
 이미지를 실행한 인스턴스
 프로세스 수준 격리
 생성, 시작, 정지, 삭제 가능

4.3 Dockerfile (도커파일)
 이미지를 만들기 위한 스크립트 파일
 설정 자동화 및 환경 통제 가능

4.4 Docker Registry (도커 레지스트리)
 이미지 저장소
 예: Docker Hub, AWS ECR, Google GCR

5. 도커의 작동 흐름
 컨테이너 실행 과정
  이미지 생성(Build): Dockerfile 기반으로 이미지 생성
  이미지 저장(Push): Registry에 저장(선택적)
  이미지 다운로드(Pull): 필요 시 registry에서 가져옴
  컨테이너 실행(Run): 이미지를 기반으로 인스턴스 생성 및 실행
  애플리케이션 동작: 격리된 환경에서 실행

6. 도커의 주요 특징 요약
항목		설명
가상화 방식	OS 수준 가상화 (커널 공유)
배포 단위	이미지 → 컨테이너
실행 속도	매우 빠름 (수 초 이내)
환경 일관성	개발, 테스트, 운영 동일 환경
리소스 효율성	가상머신 대비 매우 우수
확장성	마이크로서비스, CI/CD, 클라우드와 잘 호환

7. 도커 활용 분야
 개발환경 표준화
 테스트 자동화
 CI/CD 파이프라인 통합
 마이크로서비스 아키텍처
 클라우드 네이티브 앱 배포


설치
https://www.docker.com/products/docker-desktop/
Download for Windows - AMD64 설치

제어판 > 프로그램 및 기능 > 왼쪽에 Windows 기능 켜기/끄기 > Hyper-V 체크 Docker Desktop설치하고 재시작 할거라 재시작 하지않기

Docker Desktop Installer.exe 로 설치
기본값 그대로Ok
설치완료 재시작

doker desktop 실행

An unexpected error occurred 에러

PowerShell 관리자 권한으로 실행
wsl --shutdown

재부팅

Doker Desktop 실행 후 
Engine running 확인
















